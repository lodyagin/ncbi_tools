(* ================================================================================
	makedemo.met

	An AppleScript to compile Entrez and Sequin with Metrowerks CodeWarrior.

	Revision History:
	----------------

	11/16/95	Harmon		Created
	  3/1/96	Kans		Consolidated
	 4/19/00	Kans		Include files now found in situ in ncbi directory
	11/01/00	Kans		Removed 68K support
	 4/19/01	Juran		Major redesign, added Carbon support
	
	Before running this file, build the libraries with the makeall.met AppleScript.

	================================================================================ *)

--
-- Properties
--

property pProjectFileExtension : ".mcp"

property pAlwaysCreateProjects : false
property pBuildApps : true

-- These affect the creation of projects only.  They have no direct effect on building.
property pDoBlue : true
property pDoCarbon : true
property pDoDebug : true
property pDoOptimized : true

-- property DOPNG : true
property DOPNG : false

--
-- Global variables
--

global gStartupDisk
global gMW6root
global gMWCWfolder
global gMacLibs
global gStubLibs
global gPPCLibs
global OGLSDK

global NCBISOURCE
global LIBRARIES
global BUILDTEST
global gResources

global DOOPENGL

global gProjectData

--
-- Routines specific to this project
--

on SimpleProgramData(projName)
	tell application "CodeWarrior IDE 4.1.0.3"
		
		return {name:projName, features:{"BNDL"}, rsrcs:{"ncbilogo.r"}, settings:Â
			{Prefix File:"", ppcProject:{}}, projLibs:Â
			{"ncbi", "ncbiobj", "vibrant", "ncbitool"}, fileData:Â
			{{projPath:"demo:", fileList:{projName}}}}
		
	end tell
end SimpleProgramData

on SetProjectData()
	tell application "CodeWarrior IDE 4.1.0.3"
		
		-- Entrez
		set myName to "Entrez"
		set myFeatures to {"Open Transport", "BNDL"}
		set mySettings to {Prefix File:"net.pfx", ppcProject:{File Creator:"ENTZ"}}
		set myRsrcs to {"entrez.r"}
		set myLibs to {"mitsock", "ncbi", "ncbiobj", "ncbicdr", "vibrant", "ncbidesk", "ncbimmdb", "ncbicn3d", Â
			"ncbitool", "netcli", "netentr", "ncbibls3", "ncbiid1", "vibnet"}
		set myFiles to Â
			{{projPath:"cdromlib:", fileList:{"accentr", "accutils"}}, Â
				{projPath:"demo:", fileList:{"entrez"}}}
		set entrezData to Â
			{name:myName, features:myFeatures, settings:mySettings, rsrcs:myRsrcs, projLibs:Â
				myLibs, fileData:myFiles}
		
		-- Sequin
		set myName to "Sequin"
		set myFeatures to {"Open Transport", "BNDL"}
		set mySettings to Â
			{Prefix File:"net.pfx", ppcProject:Â
				{File Creator:"SEQN", Preferred Size:32000, Minimum Size:6000}}
		set myRsrcs to {"sequin.r"}
		set myLibs to {"mitsock", "ncbi", "ncbiobj", "ncbicdr", "vibrant", "ncbidesk", "ncbimmdb", Â
			"ncbicn3d", "ncbitool", "netcli", "netentr", "ncbibls3", "ncbimla", "ncbitxc2", "ncbiid1", "vibnet"}
		set myFiles to Â
			{{projPath:"cdromlib:", fileList:{"accentr", "accutils"}}, Â
				{projPath:"sequin:", fileList:{"sequin1", "sequin2", "sequin3", "sequin4", "sequin5", Â
					"sequin6", "sequin7", "sequin8", "sequin9", "sequinx"}}}
		set sequinData to Â
			{name:myName, features:myFeatures, settings:mySettings, rsrcs:myRsrcs, projLibs:Â
				myLibs, fileData:myFiles}
		
		-- BlastCL3
		set myName to "blastcl3"
		set myFeatures to {"Open Transport", "BNDL"}
		set mySettings to {Prefix File:"", ppcProject:{}}
		set myRsrcs to {"ncbilogo.r"}
		set myLibs to {"mitsock", "ncbi", "ncbiobj", "vibrant", "ncbitool", "netcli", "ncbibls3"}
		set myFiles to Â
			{{projPath:"network:blast3:client:", fileList:{"blastcl3"}}}
		set blastcl3Data to Â
			{name:myName, features:myFeatures, settings:mySettings, rsrcs:myRsrcs, projLibs:Â
				myLibs, fileData:myFiles}
		
		-- Impala
		set impalaData to my SimpleProgramData("impala")
		set item 1 of fileList of item 1 of fileData of impalaData to "profiles"
		
		tell me to Â
			set gProjectData to {Â
				entrezData, sequinData, Â
				SimpleProgramData("tbl2asn"), Â
				SimpleProgramData("formatdb"), Â
				SimpleProgramData("fastacmd"), Â
				SimpleProgramData("bl2seq"), Â
				SimpleProgramData("blastall"), Â
				SimpleProgramData("blastpgp"), Â
				blastcl3Data, Â
				SimpleProgramData("megablast"), Â
				SimpleProgramData("blastclust"), Â
				SimpleProgramData("rpsblast"), Â
				SimpleProgramData("seedtop"), Â
				SimpleProgramData("copymat"), Â
				SimpleProgramData("makemat"), Â
				impalaData Â
					}
		
		if DOOPENGL then
			set cn3d to Â
				{name:"Cn3D", features:{"Open Transport", "OpenGL"}, settings:Â
					{Prefix File:"net.pfx", ppcProject:Â
						{File Creator:"Cn3D", Preferred Size:12000, Minimum Size:5000} Â
							}, projLibs:Â
					{"ncbiid1", "mitsock", "ncbi", "ncbiobj", "ncbicdr", "vibrantOGL", "ncbidesk", "ddvlib", Â
						"ncbimmdb", "ncbicn3dOGL", "ncbitool", "netcli", "netentr", "vibnet"}, fileData:Â
					{{projPath:"cdromlib:", fileList:{"accentr", "accutils"}}, Â
						{projPath:"cn3d:", fileList:{"cn3dmain"}}}}
			
			if DOPNG then
				error "Sorry, but I wasn't taught how to build with PNG."
			end if
			
			(*
			if DOPNG then
				repeat with i in {"zlib:mac:zlib.ppc.Lib", "libpng:mac:png.ppc.Lib"}
					Add Files {METRO & i} To Segment 1
				end repeat
			end if
			*)
			
			copy cn3d to end of gProjectData
		end if
		
	end tell
end SetProjectData

--
-- Routines generic to all projects
--

on ResolveAlias(pathname)
	tell application "Finder"
		--if the last character of pathname is ":" then error "Don't use a trailing colon with ResolveAlias."
		if exists folder pathname then return pathname & ":"
		if exists alias file pathname then return the original item of alias file pathname as string
		error "The folder (or alias) '" & pathname & "' doesn't exist."
	end tell
end ResolveAlias

(* ==== These subroutines set paths and other preferences during population ==== *)

on DoSetGlobals()
	tell application "Finder"
		
		set gStartupDisk to startup disk as string
		set gMW6root to gStartupDisk & "Metrowerks CodeWarrior 6.0:"
		set gMWCWfolder to gMW6root & "Metrowerks CodeWarrior:"
		set gMacLibs to gMWCWfolder & "MacOS Support:Universal:Libraries:"
		set gStubLibs to gMacLibs & "StubLibraries:"
		set gPPCLibs to gMacLibs & "PPCLibraries:"
		
		set NCBISOURCE to gMW6root & "ncbi:"
		
		try
			tell me to set Dev to ResolveAlias(gStartupDisk & "Development")
			tell me to set Trees to ResolveAlias(Dev & "Trees")
			tell me to set NCBIgroup to ResolveAlias(Trees & "NCBI")
			tell me to set Vault to ResolveAlias(NCBIgroup & "ncbi.vault")
			tell me to set Distrib to ResolveAlias(Vault & "distrib")
			set NCBISOURCE to Distrib
		end try
		
		set LIBRARIES to NCBISOURCE & "lib:"
		set BUILDTEST to NCBISOURCE & "build:"
		set gResources to NCBISOURCE & "link:macmet:"
		
		--set OGLSDK to METRO & "OpenGL SDK:"
		set results to every folder of folder gMW6root whose name starts with "OpenGL SDK"
		if (count results) > 0 then
			set OGLSDK to item 1 of results as string
			set DOOPENGL to true
		else
			set DOOPENGL to false
		end if
		
	end tell
end DoSetGlobals

on DoSetPreferences()
	tell application "CodeWarrior IDE 4.1.0.3"
		
		(* ===== Section "Target" ===== *)
		
		-- Panel "Target Settings"
		Set Preferences of panel "Target Settings" to {Linker:"MacOS PPC Linker"}
		
		-- Panel "PPC Target"
		Set Preferences of panel "PPC Project" to Â
			{Project Type:standard application, SIZE Flags:22720, File Creator:"NCBI", File Type:"APPL", Preferred Size:8000, Minimum Size:5000, Stack Size:64}
		
		(* ===== Section "Language Settings" ===== *)
		
		-- Panel "C/C++ Language"
		Set Preferences of panel "C/C++ Compiler" to Â
			{Activate CPlusPlus:false Â
				, ARM Conformance:false Â
				, Exception Handling:true Â
				, Inlining:inline_none Â
				, RTTI:false Â
				, AutoInlining:false Â
				, Pool Strings:false Â
				, Dont Reuse Strings:false Â
				, Require Function Prototypes:true Â
				, ANSI Strict:false Â
				, ANSI Keywords Only:false Â
				, Expand Trigraph Sequences:false Â
				, MPW Newlines:false Â
				, MPW Pointer Type Rules:false Â
				, Enums Always Ints:false Â
				, Prefix File:""}
		
		-- Panel "C/C++ Warnings"
		Set Preferences of panel "C/C++ Warnings" to Â
			{Treat Warnings As Errors:false Â
				, Illegal Pragmas:true Â
				, Empty Declarations:true Â
				, Possible Errors:true Â
				, Unused Variables:true Â
				, Unused Arguments:false Â
				, Extra Commas:true Â
				, Extended Error Checking:true Â
				, Hidden Virtual Functions:true Â
				, Implicit Arithmetic Conversions:false Â
				, NonInlined Functions:true Â
				, Inconsistent Class Struct:true}
		
		(* ===== Section "Code Generation" ===== *)
		
		-- Panel "PPC Processor"
		Set Preferences of panel "PPC CodeGen" to Â
			{Struct Alignment:Align_PPC Â
				, Make Strings ReadOnly:true Â
				, Store Data in TOC:true Â
				, Use FMADD Instructions:false Â
				, Use Profiler:false Â
				, Traceback Tables:TB_None Â
				, Schedule:false Â
				, Peephole Optimizer:false}
		
		(* ===== Section "Linker" ===== *)
		
		-- Panel "PPC Linker"
		Set Preferences of panel "PPC Linker" to Â
			{Generate SYM File:true Â
				, Full Path In Sym Files:true Â
				, Generate Link Map:false Â
				, Suppress Warnings:false Â
				, Link Mode:fast Â
				, Initialization Name:Â
				"", Main Name:Â
				"__start", Termination Name:""}
		
		-- Panel "PPC PEF"
		Set Preferences of panel "PPC PEF" to Â
			{Export Symbols:none Â
				, Old Definition:0 Â
				, Old Implementation:0 Â
				, Current Version:0 Â
				, Code Sorting:nosort Â
				, Share Data Section:false Â
				, Expand Uninitialized Data:false Â
				, Fragment Name:""}
		
		(* ===== Section "Debugger" ===== *)
		
		-- Panel "Debugger Settings"
		Set Preferences of panel "Debugger Target" to Â
			{Log System Messages:false}
		
		my DoSetPaths1()
		
	end tell
end DoSetPreferences

on DoSetPaths1()
	tell application "CodeWarrior IDE 4.1.0.3"
		
		(* ===== Panel Access Paths ===== *)
		-- We need to be able to move the default system compiler folder to the end of the list
		-- because certain files like "all.h" and "all" are defined by both Metrowerks and NCBI.
		-- We want to find the NCBI "all.h" first.
		Set Preferences of panel "Access Paths" to {System Paths:{}} -- This removes the compiler default folder
		
		Set Preferences of panel "Access Paths" to {Convert Paths:true}
		Set Preferences of panel "Access Paths" to {User Paths:{{name:NCBISOURCE, recursive:true, origin:absolute}}}
		Set Preferences of panel "Access Paths" to {System Paths:{{name:NCBISOURCE, recursive:true, origin:absolute}}} -- Added for speed
		
	end tell
end DoSetPaths1

on DoSetPaths2()
	tell application "CodeWarrior IDE 4.1.0.3"
		
		-- After we have added all paths, reinsert compiler default at end of list
		set dirsToAdd to {Â
			":MacOS Support:Headers:", Â
			":MacOS Support:Libraries:", Â
			":MacOS Support:Universal:", Â
			":MacOS Support:Profiler:", Â
			":MSL:MSL_C:"}
		
		set pathsToAdd to {}
		repeat with i in dirsToAdd
			copy {name:i, recursive:true, origin:shell relative} to end of pathsToAdd
		end repeat
		Set Preferences of panel "Access Paths" to {System Paths:pathsToAdd}
		
	end tell
end DoSetPaths2

on SetWeakLink(libName)
	tell application "CodeWarrior IDE 4.1.0.3"
		
		set the weak link of every target file of target (count targets of project document 1) of project document 1 Â
			whose path ends with ":" & libName Â
			to true
		
	end tell
end SetWeakLink

on AddBlueLibs()
	tell application "CodeWarrior IDE 4.1.0.3"
		
		set libsToAdd to {Â
			gMWCWfolder & "MSL:MSL_C:MSL_MacOS:Lib:PPC:MSL C.PPC.Lib", Â
			gMWCWfolder & "MSL:MSL_C:MSL_MacOS:Lib:PPC:MSL SIOUX.PPC.Lib", Â
			gMWCWfolder & "MacOS Support:Libraries:Runtime:Runtime PPC:MSL RuntimePPC.Lib", Â
			gStubLibs & "InterfaceLib", Â
			gStubLibs & "AppearanceLib", Â
			gStubLibs & "NavigationLib", Â
			gStubLibs & "MathLib", Â
			gPPCLibs & "CarbonAccessors.o"}
		
		Add Files libsToAdd
		
		my SetWeakLink("AppearanceLib")
		my SetWeakLink("NavigationLib")
		
	end tell
end AddBlueLibs

on AddCarbonLibs()
	tell application "CodeWarrior IDE 4.1.0.3"
		
		set libsToAdd to {Â
			gMWCWfolder & "MSL:MSL_C:MSL_MacOS:Lib:PPC:MSL C.Carbon.Lib", Â
			gMWCWfolder & "MSL:MSL_C:MSL_MacOS:Lib:PPC:MSL SIOUX.Carbon.Lib", Â
			gMWCWfolder & "MacOS Support:Libraries:Runtime:Runtime PPC:MSL RuntimePPC.Lib", Â
			gStubLibs & "CarbonLib"}
		
		Add Files libsToAdd
		
	end tell
end AddCarbonLibs

on AddFeatures(features, flags)
	tell application "CodeWarrior IDE 4.1.0.3"
		
		if features contains "BNDL" then
			Set Preferences of panel "Output Flags" to {Has Bundle:true}
		end if
		
		if features contains "Open Transport" and flags does not contain "Carbon" then
			set libsToAdd to {Â
				gStubLibs & "ThreadsLib", Â
				gStubLibs & "OpenTransportLib", Â
				gStubLibs & "OpenTptInternetLib", Â
				gStubLibs & "InternetConfigLib", Â
				gPPCLibs & "OpenTptInetPPC.o", Â
				gPPCLibs & "OpenTransportAppPPC.o"}
			
			Add Files libsToAdd
			
		end if
		
		if features contains "OpenGL" then
			set OpenGLLibs to OGLSDK & "Libraries:"
			Set Preferences of panel "Access Paths" to {System Paths:{{name:OpenGLLibs, recursive:true, origin:absolute}}}
			Add Files {OpenGLLibs & "OpenGLLibraryStub", OpenGLLibs & "OpenGLUtilityStub"}
		end if
		
	end tell
end AddFeatures

on SetupTarget(proj, flags)
	tell application "CodeWarrior IDE 4.1.0.3"
		
		-- initialize variables
		set projRsrcs to {}
		set projFeatures to {}
		
		-- Grab the fields of our project record and store them in local variables.
		set projName to proj's name
		set projSettings to proj's settings
		try
			set projFeatures to proj's features
		end try
		try
			set projRsrcs to proj's rsrcs
		end try
		set projLibs to proj's projLibs
		set projFileData to proj's fileData
		
		-- Figure out what our output file and input libraries will be named.
		if flags contains "Carbon" then
			set targetAPI to "Carbon"
		else
			set targetAPI to "Blue"
		end if
		if flags contains "debug" then
			set targetDebug to "debug"
		else
			set targetDebug to ""
		end if
		set targetName to projName & " " & targetAPI
		set fnSuffix to "-" & targetAPI
		if targetDebug is not "" then
			set targetName to targetName & " " & targetDebug
			set fnSuffix to fnSuffix & "-" & targetDebug
		end if
		set targetFilename to targetName
		
		-- Make the new target, and set the current target to be it.
		make new target at project document 1 with properties {name:targetName}
		set the current target of project document 1 to the result
		
		-- Set default settings.  do this BEFORE setting per-project settings!
		my DoSetPreferences()
		
		-- Set the name of the output file (the application)
		Set Preferences of panel "PPC Project" to {File Name:targetFilename}
		
		-- If we have any per-project override settings, set them.
		if (count ppcProject of projSettings) > 0 then
			Set Preferences of panel "PPC Project" to ppcProject of projSettings
		end if
		--Set Preferences of panel "Access Paths" to {User Paths:{{name:NCBISOURCE & projPath, origin:absolute}}}
		my DoSetPaths2()
		
		-- Set the appropriate prefix file.
		set prefixFile to Prefix File of projSettings
		if flags contains "Carbon" then
			if prefixFile is "" then
				set prefixFile to "CarbonPrefix.h"
			else
				set prefixFile to "Carbon-" & prefixFile
			end if
		end if
		Set Preferences of panel "C/C++ Compiler" to {Prefix File:prefixFile}
		
		-- Add source files.
		repeat with group in projFileData
			set projPath to projPath of group
			set fileList to group's fileList
			set filesToAdd to {}
			repeat with i in fileList
				copy NCBISOURCE & projPath & i & ".c" to end of filesToAdd
			end repeat
			Add Files filesToAdd
		end repeat
		
		-- To debug, or not to debug
		if flags contains "debug" then
			set the debug of every target file of target (count targets of project document 1) Â
				of project document 1 to true
			Set Preferences of panel "PPC Global Optimizer" to Â
				{Optimize For:code_Speed, Level:0}
			Set Preferences of panel "PPC Linker" to Â
				{Generate SYM File:true}
			Set Preferences of panel "C/C++ Compiler" to Â
				{Inlining:inline_none Â
					, AutoInlining:false}
		else
			Set Preferences of panel "PPC Global Optimizer" to Â
				{Optimize For:code_Speed, Level:1}
			Set Preferences of panel "PPC Linker" to Â
				{Generate SYM File:false}
			Set Preferences of panel "C/C++ Compiler" to Â
				{Inlining:inline_smart Â
					, AutoInlining:true}
		end if
		
		-- Add appropriate system libraries.
		if flags contains "Carbon" then
			my AddCarbonLibs()
		else
			my AddBlueLibs()
		end if
		my AddFeatures(projFeatures, flags)
		
		set filesToAdd to {}
		
		-- Add user libraries.
		repeat with i in projLibs
			copy LIBRARIES & i & fnSuffix & ".lib" to end of filesToAdd
		end repeat
		
		-- Add resources.
		repeat with i in projRsrcs
			copy gResources & i to end of filesToAdd
		end repeat
		
		Add Files filesToAdd
		
		Reset File Paths
		
	end tell
end SetupTarget

on CreateProject(proj)
	tell application "CodeWarrior IDE 4.1.0.3"
		
		set projFilename to proj's name & pProjectFileExtension
		set projPathname to BUILDTEST & projFilename
		if pAlwaysCreateProjects or not (exists file projPathname of application "Finder") then
			
			try
				close (the first project document whose name is projFilename)
			end try
			
			Create Project {projPathname}
			
			if pDoBlue and pDoOptimized then
				my SetupTarget(proj, "Blue")
			end if
			
			if pDoBlue and pDoDebug then
				my SetupTarget(proj, "Blue debug")
			end if
			
			if pDoCarbon and pDoOptimized then
				my SetupTarget(proj, "Carbon")
			end if
			
			if pDoCarbon and pDoDebug then
				my SetupTarget(proj, "Carbon debug")
			end if
			
			set the current target of project document 1 to target 1 of project document 1
			
			Close Project
			
		end if
		
	end tell
end CreateProject

on CreateAllProjects()
	
	repeat with proj in gProjectData
		CreateProject(proj)
	end repeat
	
end CreateAllProjects

on BuildProgram(projName)
	tell application "CodeWarrior IDE 4.1.0.3"
		open (BUILDTEST & projName & pProjectFileExtension)
		repeat with i from 2 to (count targets of project document 1)
			set the current target of project document 1 to target i of project document 1
			Make Project
			-- If there were compiler warnings, then a compiler window will be in front.
			-- For whatever reason, this causes the next "set the current target..." to fail.
			-- An easy way to make the window go away without having to know if it's there or not 
			-- is to build again, which, because everything is already compiled, finishes instantly
			-- and produces no warnings.
			--Make Project
			-- An even better way is to check for the window and close it.
			if the name of window 1 is "Errors & Warnings" then
				close first window -- "close window 1" becomes "Close Window 1" (different event)
			end if
		end repeat
		set the current target of project document 1 to target 1 of project document 1
		Close Project
	end tell
end BuildProgram

on BuildAllPrograms()
	
	repeat with proj in gProjectData
		BuildProgram(proj's name)
	end repeat
	
end BuildAllPrograms

on SignalCompletion()
	
	try
		say "Make complete."
	on error
		beep
	end try
	
end SignalCompletion

(* ==== The following steps populate and build the programs ==== *)

with timeout of 60000 seconds
	
	DoSetGlobals()
	
	SetProjectData()
	
	tell application "CodeWarrior IDE 4.1.0.3" to activate
	
	CreateAllProjects()
	
	if pBuildApps then
		BuildAllPrograms()
	end if
	
	SignalCompletion()
	
end timeout

