$!
$!  MAKENET.TGV (OpenVMS VAX, Multinet TCP/IP suite)
$!
$!   Usage: @makenet.tgv
$!
$!   Builds the network interface, Entrez network access, and client TCP
$!   libraries.
$!
$!   Creates the applications:
$!
$!      NetEntCf - A version of the Entrez configuration program, EntrezCf,
$!                  which includes network support
$!      NEntrez  - Network version of Entrez
$!      CEntrez  - Combo version of Entrez which works with CD-ROMs
$!                  and Network services.  This version uses CD-ROM data
$!                  when available, network services otherwise.
$!
$!   William A. Gilbert
$!   Univ. of New Hampshire   gilbert@unh.edu
$!--------------------------------------------------------------------------
$! save_verify = f$verify("yes")
$ if("''P1'" .nes. "")then set default 'P1'
$ set verify
$!
$! Set up compiler definitions. These are specific for the Multinet TCP/IP 
$! from TGV, Inc. suite.
$!
$! CC == "cc/nolist/include=([],[-.include])"
$! CCFLAGS = "/define=(NETP_INET_TGV,__TIME)"
$! RIPEMCC == "cc/nolist/include=([-.network.encrypt.ripem.rsaref.source])"
$ mycc := cc
$ myargs = "/nolist/standard=ANSI89/prefix=all/noopt/include=([],[-.include])"
$ myripemargs = myargs - ")"  + ",[-.network.encrypt.ripem.rsaref.source])"
$ MYCCFLAGS = "/define=(DCC4DW12,NETP_INET_TGV)"
$! decide whether or not to use encryption, here, no, otherwise ENCRYPT
$ option = "NOENCRYPT"
$!
$!--------------------------------------------------------------------------
$! Add Network include files into NCBI include area
$!
$ copy [-.network.entrez.client]*.h  [-.include]     ! Entrez network access
$ copy [-.network.nsclilib]*.h [-.include]           ! Network services 
$ purge [-.include]
$!
$!--------------------------------------------------------------------------
$!
$! Make Network Interface library, netcli
$!
$!    N.B. Due to some problem between the compiler and the librarian
$!         these object files will not produce a runnable executable
$!         if linked in as a library, hence seperate files should be
$!         used during linking.
$! DRM.  Let's see if this is still true....
$ define/nolog where [-.network.nsclilib] 
$ mycc 'myargs' 'myccflags' where:ni_msg.c
$ mycc 'myargs' 'myccflags' where:ni_lib.c
$ mycc 'myargs' 'myccflags' where:ni_error.c
$!--------------------------------------------------------------------------
$!
$! Make RIPEM encryption library, with encryption "ni_encr.c" module
$! or use the stub routine. Do one or the other of the options below.
$!
$if (option .eqs. "NOENCRYPT")
$then
$!
$! Make the encryption stub, and an encryption stub library
$!
$ mycc 'myargs' 'myccflags' where:ni_encrs.c
$ library/create/object  ncbi_ni -
  ni_msg,ni_lib,ni_error,ni_encrs
$ rename ncbi_ni.olb [-.lib]
$ delete *.obj.
$ library/create/object libencrypt
$ rename libencrypt.olb [-.lib]
$else
$!
$! Make the encryption interface routine
$! ONLY IF YOU HAVE PICKED UP THE RSA STUFF FIRST, otherwise
$! use  the stub routine ni_encrs
$!
$ mycc 'myripemargs' 'myccflags'  where:ni_encr.c
$ rename ncbi_ni.olb [-.lib]
$ delete *.obj.
$!
$!
$ define/nolog where [-.network.encrypt.ripem.rsaref.source]
$ mycc 'myripemargs' 'myccflags'   where:desc.c
$ mycc 'myripemargs' 'myccflags'   where:digit.c
$ mycc 'myripemargs' 'myccflags'   where:digitas.c
$ mycc 'myripemargs' 'myccflags'   where:md2c.c
$ mycc 'myripemargs' 'myccflags'   where:md5c.c
$ mycc 'myripemargs' 'myccflags'   where:nn.c
$ mycc 'myripemargs' 'myccflags'   where:prime.c
$ mycc 'myripemargs' 'myccflags'   where:r_encode.c
$ mycc 'myripemargs' 'myccflags'   where:r_enhanc.c
$ mycc 'myripemargs' 'myccflags'   where:r_keygen.c
$ mycc 'myripemargs' 'myccflags'   where:r_random.c
$ mycc 'myripemargs' 'myccflags'   where:r_stdlib.c
$ mycc 'myripemargs' 'myccflags'   where:rsa.c
$!
$ Librarian/create/object libencrypt  -
      desc,digit,digitas,md2c,md5c,nn,prime,-
      r_encode,r_enhanc,r_keygen,r_random,r_stdlib,rsa
$ rename libencrypt.olb [-.lib]
$ delete *.obj.
$endif
$!--------------------------------------------------------------------------
$!
$! Make Network Dispatcher/Entrez access library, netentr
$!
$ define/nolog where [-.network.entrez.client]
$ mycc 'myargs' 'myccflags' where:netentr.c
$ mycc 'myargs' 'myccflags' where:netlib.c
$ mycc 'myargs' 'myccflags' where:objneten.c
$!
$ Libr/create/object netentr -
   netentr,netlib,objneten
$ rename netentr.olb [-.lib]
$ delete *.obj.
$!
$! Make library which depends upon both Vibrant and the network client
$!
$ define/nolog where [-.network.vibnet]
$ mycc 'myargs' 'myccflags' where:netcnfg.c
$ mycc 'myargs' 'myccflags' where:trmlst.c
$ mycc 'myargs' 'myccflags' where:docsum.c
$!
$ Libr/create/object vibnet -
   netcnfg,trmlst,docsum
$ rename vibnet.olb [-.lib]
$ delete *.obj.

$!
$!=====================  A P P L I C A T I O N S  ==========================
$!
$! Make version of EntrezCf which has network support
$!
$ MYTMPFLAGS = MYCCFLAGS - ")" + ",WIN_MOTIF)"
$ mycc 'myargs' 'mytmpflags'/obj=netentcf [-.demo]netentcf.c
$!
$!  Link NetentCf
$!
$ link/nomap/exe=netentcf [-.lib]vibwndws,[]netentcf.obj,sys$input/option
[-.lib]libvibrant.olb/library
[-.lib]libncbicdr.olb/library
[-.lib]netentr.olb/library
[-.lib]vibnet.olb/library
[-.lib]libencrypt.olb/library
[-.lib]libncbi.olb/library
[-.lib]ncbi_ni.olb/library
multinet:multinet_socket_library.exe/Shareable
sys$share:decw$xlibshr/share
sys$share:decw$dxmlibshr12/shareable
sys$share:decw$xmlibshr12/shareable
sys$share:decw$xtlibshrr5/shareable
$! previous version
$![-.lib]ni_lib.obj
$![-.lib]ni_msg.obj
$![-.lib]ni_error.obj
$![-.lib]ni_encrs.obj
$!sys$share:decw$xlibshr.exe/shareable
$!sys$share:decw$dxmlibshr.exe/shareable
$!sys$share:decw$xmlibshr.exe/shareable
$!sys$share:decw$xtshr.exe/shareable
$! sys$share:vaxcrtl.exe/shareable
$!
$! move the .exe files to [-.bin]
$!
$ rename *.exe [-.bin]
$!-------------------------------------------------------------------------
$!
$! To redirect the Motif window output for Multinet use:
$!
$!    $ set display/create/node=gilbert.unh.edu/transport=tcpip   
$!
$! if .not.save_verify then set noverify
$ exit

