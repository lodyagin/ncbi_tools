(* ================================================================================
	makeall.met

	An AppleScript to compile the NCBI Toolkit base libraries with
	Metrowerks CodeWarrior.

	Revision History:
	----------------

	??/??/??	Kans		Created
	10/11/95	Corarito	Modified for CW7
	11/22/95	Harmon		CopyHdrs script must be run first
	 2/18/96	Kans		Consolidated all 68K/PPC scripts
	 3/15/00	Churchill   Modified for OpenTransport work in progress
	 4/19/00	Kans		Only need to copy ncbilcl.met to ncbilcl.h
	11/01/00	Kans		Removed 68K support
	 4/19/01	Juran		Major redesign, added Carbon support

	This file now subsumes the old copyhdrs.met and makenet.met AppleScripts.

	================================================================================ *)

property pProjectFileExtension : ".mcp"

property pAlwaysCreateProjects : false
property pShouldBuild : true
property pBuildObsoleteLibraries : false

-- Which targets to create.
-- If these are changed you must recreate the project files.  There is no direct effect on building.
property pCreateBlueTargets : true -- 'Blue' was the codename for System 7.  Here, it means pre-Carbon.
property pCreateCarbonTargets : true
property pCreateDebugTargets : true
property pCreateOptimizedTargets : true

property DOPNG : false

(* ==== These symbols will be derived ==== *)

global gStartupDisk
global gMW6root
global OGLSDK

global NCBISOURCE
global LIBRARIES
global BUILDTEST
global CTOOLS

global INCLUDEFILES
global DOOPENGL

on ResolveAlias(pathname)
	tell application "Finder"
		--if the last character of pathname is ":" then error "Don't use a trailing colon with ResolveAlias."
		if exists folder pathname then return pathname & ":"
		if exists alias file pathname then return the original item of alias file pathname as string
		error "The folder (or alias) '" & pathname & "' doesn't exist."
	end tell
end ResolveAlias

(* ==== These subroutines set paths and other preferences during population ==== *)

on DoSetGlobals()
	tell application "Finder"
		
		set gStartupDisk to startup disk as string
		set gMW6root to gStartupDisk & "Metrowerks CodeWarrior 6.0:"
		
		set NCBISOURCE to gMW6root & "ncbi:"
		
		try
			tell me to set Dev to ResolveAlias(gStartupDisk & "Development")
			tell me to set Trees to ResolveAlias(Dev & "Trees")
			tell me to set NCBIgroup to ResolveAlias(Trees & "NCBI")
			tell me to set Vault to ResolveAlias(NCBIgroup & "ncbi.vault")
			tell me to set Distrib to ResolveAlias(Vault & "distrib")
			set NCBISOURCE to Distrib
		end try
		
		set INCLUDEFILES to NCBISOURCE & "include:"
		set LIBRARIES to NCBISOURCE & "lib:"
		set BUILDTEST to NCBISOURCE & "build:"
		set CTOOLS to NCBISOURCE & "ctools:"
		
		set results to every folder of folder gMW6root whose name starts with "OpenGL SDK"
		if (count results) > 0 then
			set OGLSDK to item 1 of results as string
			set DOOPENGL to true
		else
			set DOOPENGL to false
		end if
		
	end tell
end DoSetGlobals

on CreateFolders()
	tell application "Finder"
		
		if not (exists (folder INCLUDEFILES)) then
			make new folder at folder NCBISOURCE with properties {name:"include"}
		end if
		
		if not (exists (folder LIBRARIES)) then
			make new folder at folder NCBISOURCE with properties {name:"lib"}
		end if
		
		if not (exists (folder CTOOLS)) then
			make new folder at folder NCBISOURCE with properties {name:"ctools"}
		end if
		
		if not (exists (folder BUILDTEST)) then
			make new folder at folder NCBISOURCE with properties {name:"build"}
		end if
		
	end tell
end CreateFolders

on HeaderExists(header, headerDir)
	tell application "Finder"
		
		if headerDir is "" then set headerDir to folder INCLUDEFILES
		return exists file header of headerDir
		
	end tell
end HeaderExists

on IsOlderThan(fileA, fileB)
	tell application "Finder"
		
		return (the modification date of fileA < the modification date of fileB)
		
	end tell
end IsOlderThan

on UpdateRenameHeader(canonicalName, canonicalDir, dotHName, dotHDir)
	tell application "Finder"
		
		set needRename to (dotHName is not "")
		if not needRename then set dotHName to canonicalName
		if dotHDir is "" then set dotHDir to folder INCLUDEFILES
		
		-- This file is only present if the script was interrupted.
		if needRename and my HeaderExists(canonicalName, dotHDir) then
			delete file canonicalName of dotHDir
		end if
		
		-- The native config file.
		set canonicalFile to file canonicalName of canonicalDir
		
		set needCopy to true
		if my HeaderExists(dotHName, dotHDir) then
			set dotHFile to file dotHName of dotHDir
			if my IsOlderThan(dotHFile, canonicalFile) then
				delete dotHFile
			else
				set needCopy to false
			end if
		end if
		
		if needCopy then
			duplicate canonicalFile to dotHDir
			if needRename then set name of file canonicalName of dotHDir to dotHName
		end if
		
	end tell
end UpdateRenameHeader

on UpdateHeader(headerName, headerDir)
	
	UpdateRenameHeader(headerName, headerDir, "", "")
	
end UpdateHeader

on CopyPrefixes()
	tell application "Finder"
		
		my UpdateRenameHeader("ncbilcl.met", folder "corelib" of folder NCBISOURCE, "ncbilcl.h", "")
		my UpdateRenameHeader("asn_connection.h", folder "connect" of folder NCBISOURCE, "", folder CTOOLS)
		
	end tell
	
	--set asnConH to file "asn_connection.h" of (folder "connect" of folder NCBISOURCE)
	--copy {asnConH} to {folder CTOOLS}
end CopyPrefixes

on DoSetPreferences()
	tell application "CodeWarrior IDE 4.1.0.3"
		
		(* ===== Panel Target ===== *)
		Set Preferences of panel "Target Settings" to {Linker:"MacOS PPC Linker"}
		
		(* ===== Panel Project ===== *)
		Set Preferences of panel "PPC Project" to {Project Type:library}
		
		(* ===== Panel C/C++ Language ===== *)
		Set Preferences of panel "C/C++ Compiler" to Â
			{Activate CPlusPlus:false Â
				, ARM Conformance:false Â
				, Exception Handling:true Â
				, Inlining:inline_none Â
				, RTTI:false Â
				, Pool Strings:false Â
				, Dont Reuse Strings:false Â
				, Require Function Prototypes:true Â
				, ANSI Strict:false Â
				, ANSI Keywords Only:false Â
				, Expand Trigraph Sequences:false Â
				, MPW Newlines:false Â
				, MPW Pointer Type Rules:false Â
				, Enums Always Ints:false Â
				, Prefix File:""}
		
		(* ===== Panel C/C++ Warnings ===== *)
		Set Preferences of panel "C/C++ Warnings" to Â
			{Treat Warnings As Errors:false Â
				, Illegal Pragmas:true Â
				, Empty Declarations:true Â
				, Possible Errors:true Â
				, Unused Variables:true Â
				, Unused Arguments:false Â
				, Extra Commas:true Â
				, Extended Error Checking:true Â
				, Hidden Virtual Functions:true Â
				, Implicit Arithmetic Conversions:false Â
				, NonInlined Functions:true Â
				, Inconsistent Class Struct:true}
		
		(* ===== Panel PPC Processor ===== *)
		Set Preferences of panel "PPC CodeGen" to Â
			{Struct Alignment:Align_PPC Â
				, Make Strings ReadOnly:true Â
				, Store Data in TOC:true Â
				, Use FMADD Instructions:false Â
				, Use Profiler:false Â
				, Traceback Tables:TB_None Â
				, Schedule:false Â
				, Peephole Optimizer:false}
		
		(* ===== Panel PPC Linker ===== *)
		Set Preferences of panel "PPC Linker" to Â
			{Generate SYM File:true Â
				, Full Path In Sym Files:true Â
				, Generate Link Map:false Â
				, Suppress Warnings:false Â
				, Link Mode:fast Â
				, Initialization Name:Â
				"", Main Name:Â
				"__start", Termination Name:""}
		
		(* ===== Panel PPC PEF ===== *)
		Set Preferences of panel "PPC PEF" to Â
			{Export Symbols:none Â
				, Old Definition:0 Â
				, Old Implementation:0 Â
				, Current Version:0 Â
				, Code Sorting:nosort Â
				, Share Data Section:false Â
				, Expand Uninitialized Data:false Â
				, Fragment Name:""}
		
		(* ===== Panel Debugger ===== *)
		Set Preferences of panel "Debugger Target" to Â
			{Log System Messages:false}
		
		my DoSetPaths1()
		
	end tell
end DoSetPreferences

on DoSetPaths1()
	tell application "CodeWarrior IDE 4.1.0.3"
		
		(* ===== Panel Access Paths ===== *)
		-- We need to be able to move the default system compiler folder to the end of the list
		-- because certain files like "all.h" and "all" are defined by both Metrowerks and NCBI.
		-- We want to find the NCBI "all.h" first.
		Set Preferences of panel "Access Paths" to {System Paths:{}} -- This removes the compiler default folder
		
		Set Preferences of panel "Access Paths" to {Convert Paths:true}
		Set Preferences of panel "Access Paths" to {User Paths:{{name:NCBISOURCE, recursive:true, origin:absolute}}}
		Set Preferences of panel "Access Paths" to {System Paths:{{name:NCBISOURCE, recursive:true, origin:absolute}}} -- Added for speed
		
	end tell
end DoSetPaths1

on DoSetPaths2()
	tell application "CodeWarrior IDE 4.1.0.3"
		
		-- After we have added all paths, reinsert compiler default at end of list
		set dirsToAdd to {Â
			":MacOS Support:Headers:", Â
			":MacOS Support:Libraries:", Â
			":MacOS Support:Universal:", Â
			":MacOS Support:Profiler:", Â
			":MSL:MSL_C:", Â
			":MacOS Support:OpenTransport:"}
		if DOOPENGL then
			copy OGLSDK to end of dirsToAdd
		end if
		if DOPNG then
			copy gMW6root & "zlib:" to end of dirsToAdd
			copy gMW6root & "libpng:" to end of dirsToAdd
		end if
		
		set pathsToAdd to {}
		repeat with i in dirsToAdd
			copy {name:i, recursive:true, origin:shell relative} to end of pathsToAdd
		end repeat
		Set Preferences of panel "Access Paths" to {System Paths:pathsToAdd}
		
	end tell
end DoSetPaths2

on SetupTarget(projName, projFiles, prefixFile, flags)
	tell application "CodeWarrior IDE 4.1.0.3"
		
		if flags contains "Carbon" then
			set targetAPI to "Carbon"
		else
			set targetAPI to "Blue"
		end if
		if flags contains "debug" then
			set targetDebug to "debug"
		else
			set targetDebug to ""
		end if
		set targetName to projName & " " & targetAPI
		set targetFilename to projName & "-" & targetAPI
		if targetDebug is not "" then
			set targetName to targetName & " " & targetDebug
			set targetFilename to targetFilename & "-" & targetDebug
		end if
		set targetFilename to targetFilename & ".lib"
		
		make new target at project document 1 with properties {name:targetName}
		set the current target of project document 1 to the result
		Set Preferences of panel "PPC Project" to {File Name:targetFilename}
		
		my DoSetPreferences()
		--Set Preferences of panel "Access Paths" to {User Paths:{{name:NCBISOURCE & projPath, origin:absolute}}}
		my DoSetPaths2()
		
		if flags contains "Carbon" then
			if prefixFile is "" then
				set prefixFile to "CarbonPrefix.h"
			else
				set prefixFile to "Carbon-" & prefixFile
			end if
		end if
		Set Preferences of panel "C/C++ Compiler" to {Prefix File:prefixFile}
		
		repeat with group in projFiles
			set projPath to projPath of group
			set fileList to group's fileList
			set filesToAdd to {}
			repeat with i in fileList
				copy NCBISOURCE & projPath & i & ".c" to end of filesToAdd
			end repeat
			Add Files filesToAdd
		end repeat
		
		if flags contains "debug" then
			set the debug of every target file of target (count targets of project document 1) Â
				of project document 1 to true
			Set Preferences of panel "PPC Global Optimizer" to Â
				{Optimize For:code_Speed, Level:0}
		else
			Set Preferences of panel "PPC Global Optimizer" to Â
				{Optimize For:code_Speed, Level:1}
		end if
		
		Reset File Paths
		
	end tell
end SetupTarget

on CreateProject(projName, projFiles, prefixFile)
	tell application "CodeWarrior IDE 4.1.0.3"
		
		set projFilename to projName & pProjectFileExtension
		set projPathname to LIBRARIES & projFilename
		if pAlwaysCreateProjects or not (exists file projPathname of application "Finder") then
			
			try
				close (the first project document whose name is projFilename)
			end try
			
			Create Project {projPathname}
			
			if pCreateBlueTargets and pCreateDebugTargets then
				my SetupTarget(projName, projFiles, prefixFile, "Blue debug")
			end if
			
			if pCreateBlueTargets and pCreateOptimizedTargets then
				my SetupTarget(projName, projFiles, prefixFile, "Blue")
			end if
			
			if pCreateCarbonTargets and pCreateDebugTargets then
				my SetupTarget(projName, projFiles, prefixFile, "Carbon debug")
			end if
			
			if pCreateCarbonTargets and pCreateOptimizedTargets then
				my SetupTarget(projName, projFiles, prefixFile, "Carbon")
			end if
			
			set the current target of project document 1 to target 1 of project document 1
			
			Close Project
			
		end if
		
	end tell
end CreateProject

on CreateSimpleProject(projName, projPath, projFiles)
	
	CreateProject(projName, {{projPath:projPath, fileList:projFiles}}, "")
	
end CreateSimpleProject

on CreateAllProjects()
	
	(* ==== This handler populates all the libraries with the appropriate source files ==== *)
	
	CreateSimpleProject("mitsock", "connect:mitsock:", Â
		{"OTSocketInternal", "OTErrno", "OTSockets", "OTidle", "OTNetdbServices", "OTnetdb"}, "")
	
	
	CreateProject("ncbi", {Â
		Â
			{projPath:"corelib:", fileList:{Â
				"ncbibs", "ncbienv", "ncbierr", "ncbifile", "ncbimath", "ncbimem", "ncbimisc", Â
				"ncbimsg", "ncbiprop", "ncbisgml", "ncbistr", "ncbitime", "ncbilang", "gifgen", Â
				"togif", "ncbithr", "tsprintf", "tree", "wwwutils", "matrix", "binary"}}, Â
		Â
			{projPath:"connect:", fileList:{Â
				"ncbibuf", "ncbi_buffer", "ncbisock", Â
				"ncbi_socket_", "ncbi_core", "ncbi_util", "ncbi_priv", Â
				"ncbi_ansi_ext", "ncbi_connection", "ncbi_connector", "ncbi_connutil", Â
				"ncbi_file_connector", "ncbi_http_connector", Â
				"ncbi_server_info", "ncbi_service", Â
				"ncbi_service_connector", "ncbi_service_dispd", Â
				"ncbi_service_lbsmd_stub", "ncbi_socket_connector", Â
				"ncbi_sendmail_", "asn_connection", "urlquery"}}, Â
		Â
			{projPath:"asnlib:", fileList:{Â
				"asnbufo", "asndebin", "asnenbin", "asngen", "asngenob", "asnio", "asnlex", Â
				"asnlext", "asnout", "asnprint", "asntypes"}}}, "")
	
	
	CreateProject("ncbiobj", {Â
		Â
			{projPath:"object:", fileList:{Â
				"objacces", "objalign", "objall", "objbibli", "objblock", "objcode", "objfdef", Â
				"objfeat", "objgen", "objloc", "objmdrs", "objmedli", "objmime", "objproj", Â
				"objprt", "objpub", "objpubme", "objres", "objseq", "objsset", "objalignloc", Â
				"objsub"}}, Â
		Â
			{projPath:"biostruc:cn3d:", fileList:{Â
				"objcn3d"}}, Â
		Â
			{projPath:"access:", fileList:{Â
				"objent2", "ent2api", "pmfapi", "strucapi", "qblastapi", "vecscnapi", "objmim", Â
				"mimapi"}}, Â
		Â
			{projPath:"api:", fileList:{Â
				"asn2ff1", "asn2ff2", "asn2ff3", "asn2ff4", "asn2ff5", "asn2ff6", "codon", "edutil", Â
				"ffprint", "findrepl", "ftusrstr", "gather", "gbfeat", "gbftglob", "gbparint", Â
				"jzcoll", "jzmisc", "lsqfetch", "maputil", "mconsist", "objmgr", "prtutil", "satutil", Â
				"seqmgr", "seqport", "sequtil", "simple", "sqnutil1", "sqnutil2", "sqnutil3", Â
				"subutil", "tofasta", "tofile", "tomedlin", "utilpars", "utilpub", "salpstat", Â
				"salpedit", "valid", "alignmgr", "aliparse", "aliread", "alignval", "wprint", Â
				"salpacc", "salprop", "salsap", "salstruc", "salutil", "udvseq", "blocks", Â
				"pgppop", "samutil", "ddvcolor", "viewmgr", "jsavlt", "needleman", "fdlobj", "txalign"}}, Â
		Â
			{projPath:"ddv:", fileList:{Â
				"ddvcreate"}}}, "")
	
	
	CreateProject("ncbicdr", {Â
		Â
			{projPath:"cdromlib:", fileList:{Â
				"casn", "cdconfig", "cdentrez", "cdnewlib", "cdromlib", "objentr"}}}, "")
	
	
	CreateProject("vibrant", {Â
		Â
			{projPath:"vibrant:", fileList:{Â
				"ncbidraw", "vibbutns", "vibextra", "vibfiles", "vibforms", "vibgroup", "viblists", Â
				"vibmenus", "vibprmpt", "vibsbars", "vibslate", "vibtexts", "vibutils", Â
				"vibwndws", "document", "drawing", "mapping", "palette", "picture", "table", Â
				"viewer", "diagnost", "image", "pictur3d", "prim3d1", "prim3d2", "prim3d3", Â
				"prim3d4", "prim3d5", "viewer3d", "vibmouse", "imagelst", "treeview", "shim3d", Â
				"odlbox"}}}, "")
	
	CreateProject("ncbidesk", {Â
		Â
			{projPath:"desktop:", fileList:{Â
				"biosrc", "bspview", "cdrgn", "dlgutil1", "dlgutil2", "dotmatrx", "drawseq", Â
				"fea2seg", "fstyle", "glbpic", "gbfview", "gphview", "gphdraw", "gxydraw", Â
				"gtrdraw", "ingengraph", "import", "layout", "mapgene", "medview", "prtgene", Â
				"pubdesc", "saldist", "saled", "salfiles", "salpanel", "salparam", "salsa", "seqsub", Â
				"seqfltr", "seqgraph", "seqgrphx", "seqmtrx", "seqpcc", "seqanal", "aacomp", Â
				"seqscrl", "smdlg1", "smdlg2", "smdlg3", "smtools", "styleman", "stylemui", Â
				"vsm", "vsmfile", "vsmutil", "udvgraph", "udvopen", "udvpanel", "salogif", Â
				"dotvibrant"}}}, "")
	
	CreateProject("ddvlib", {Â
		Â
			{projPath:"ddv:", fileList:{Â
				"ddvclick", "ddvgraph", "ddvopen", "ddvpanel"}}}, "")
	
	
	if pBuildObsoleteLibraries then
		
		CreateProject("ncbiacc", {Â
			Â
				{projPath:"cdromlib:", fileList:{Â
					"accentr", "accutils", "accmmdbs", "acccn3ds"}}}, "")
		
		
		CreateProject("vibgif", {Â
			Â
				{projPath:"gif:", fileList:{Â
					"gdfontg", "gdfontl", "gdfontmb", "gdfonts", "gdfontt", "pictogif"}}, Â
			Â
				{projPath:"vibrant:", fileList:{Â
					"ncbidraw", "drawing", "mapping", "picture"}}}, "gif.pfx")
		
	end if
	
	
	CreateProject("ncbitool", {Â
		Â
			{projPath:"tools:", fileList:{Â
				"csim", "db_slist", "dust", "falign", "g_any", "pobutil", "stsutil", "sec", "sim2", Â
				"sim3", "sim4", "simutil", "slist", "suggadj", "suggest", "suggslp", "tfuns", Â
				"toasn3", "toporg", "blast", "blastutl", "blastool", "splutil", "actutils", "gapxdrop", Â
				"bandalg0", "bandalg1", "bandalg2", "bandalg3", "bandalg4", "bandalg5", Â
				"bandalgn", "blastkar", "lookup", "posit", "readdb", "ncbisam", "ncbisort", "salign", Â
				"salptool", "urkutil", "urkpcc", "urkptpf", "urkepi", "urkfltr", "urkdust", Â
				"urksigu", "seg", "urkbias", "urkcnsrt", "urktree", "pattern1", "pseed3", Â
				"impatool", "posit2", "newkar", "mbalign", "mbutils", "mblast", "vecscrn", Â
				"rpsutil", "kappa", "xmlblast", "bxmlobj", "dotseq", "spidey"}}}, "")
	
	
	CreateProject("ncbimmdb", {Â
		Â
			{projPath:"biostruc:", fileList:{Â
				"corematx", "dvncode", "objmmdb1", "objmmdb2", "objmmdb3", "mmdbapi", Â
				"mmdbapi1", "mmdbapi2", "mmdbapi3", "mmdbapi4", "mmdbentr", "vastsubs", Â
				"prunebsc"}}, Â
		Â
			{projPath:"biostruc:cdd:", fileList:{Â
				"objcdd", "cddutil", "cddposutil", Â
				"thrdalgs", "thrdatd", "thrdbwfi", "thrdcpal", Â
				"thrdcpll", "thrdcprl", "thrdcxei", "thrddgri", "thrdrsmp", Â
				"thrdsal0", "thrdsalr", "thrdsalu", "thrdsgoi", "thrdslo0", Â
				"thrdslor", "thrdslou", "thrdspci", "thrdspea", "thrdspel", Â
				"thrdspni", "thrdttb0", "thrdttbi", "thrdzsc"}}}, "gif.pfx")
	
	
	CreateProject("ncbicn3d", {Â
		Â
			{projPath:"cn3d:", fileList:{Â
				"algorend", "cn3dwin", "cn3dentr", "cn3dmsel", "cn3dopen", "cn3dsave", Â
				"cn3dxprt", "cn3dmsg", "cn3dmatn", "cn3dmodl", "cn3dshim", "cn3dmesh", Â
				"cn3dstyl", "seqcons"}}}, "")
	
	
	if DOOPENGL then
		if DOPNG then
			set openGLPrefixFile to "opengl-png.pfx"
		else
			set openGLPrefixFile to "opengl.pfx"
		end if
		
		
		CreateProject("vibrantOGL", {Â
			Â
				{projPath:"vibrant:", fileList:{Â
					"ncbidraw", "vibbutns", "vibextra", "vibfiles", "vibforms", "vibgroup", Â
					"viblists", "vibmenus", "vibprmpt", "vibsbars", "vibslate", "vibtexts", Â
					"vibutils", "vibwndws", "document", "drawing", "mapping", "palette", Â
					"picture", "table", "viewer", "diagnost", "image", "pictur3d", "prim3d1", Â
					"prim3d2", "prim3d3", "prim3d4", "prim3d5", "viewer3d", "vibmouse", Â
					"imagelst", "treeview", "shim3d", "odlbox"}}}, openGLPrefixFile)
		
		
		CreateProject("ncbicn3dOGL", {Â
			Â
				{projPath:"cn3d:", fileList:{Â
					"algorend", "cn3dwin", "cn3dentr", "cn3dmsel", "cn3dopen", "cn3dsave", Â
					"cn3dxprt", "cn3dmsg", "cn3dmatn", "cn3dmodl", "cn3dshim", "cn3dmesh", Â
					"cn3dstyl", "seqcons"}}}, openGLPrefixFile)
		
		
	end if
	
	
	CreateProject("ncbiNacc", {Â
		Â
			{projPath:"cdromlib:", fileList:{Â
				"accentr", "accutils", "accmmdbs", "acccn3ds"}}}, "net.pfx")
	
	
	CreateProject("netentr", {Â
		Â
			{projPath:"network:entrez:client:", fileList:{Â
				"netentr", "netlib", "objneten"}}}, "net.pfx")
	
	
	CreateProject("netcli", {Â
		Â
			{projPath:"network:nsclilib:", fileList:{Â
				"ncbicli", "ncbiurl", "ni_disp", "ni_encrs", "ni_serv", "ni_error", "ni_lib_", Â
				"ni_macdv", "ni_msg", "ni_www", "ni_debug"}}}, "net.pfx")
	
	
	CreateProject("ncbibls3", {Â
		Â
			{projPath:"network:blast3:client:", fileList:{Â
				"netblap3", "objblst3"}}}, "")
	
	
	CreateProject("ncbiid1", {Â
		Â
			{projPath:"network:id1arch:", fileList:{Â
				"id1gen", "id1arch", "accid1"}}}, "net.pfx")
	
	
	CreateProject("ncbimla", {Â
		Â
			{projPath:"network:medarch:client:", fileList:{Â
				"medarch", "medutil", "objmla"}}}, "")
	
	
	CreateProject("ncbitxc2", {Â
		Â
			{projPath:"network:taxon1:taxon2:", fileList:{Â
				"parttree", "taxcs", "tc2proc", "txcdproc"}}, Â
		Â
			{projPath:"network:taxon1:common:", fileList:{Â
				"objtax1", "taxutil"}}}, "tax2.pfx")
	
	
	CreateProject("vibnet", {Â
		Â
			{projPath:"network:vibnet:", fileList:{Â
				"netcnfg", "trmlst", "docsum"}}}, "net.pfx")
	
	
end CreateAllProjects

on BuildLibraries(myLibs)
	tell application "CodeWarrior IDE 4.1.0.3"
		
		(* ==== This subsection compiles the newly-populated libraries ==== *)
		
		repeat with proj in myLibs
			open (LIBRARIES & proj & pProjectFileExtension)
			repeat with i from 2 to (count targets of project document 1)
				set the current target of project document 1 to target i of project document 1
				Make Project
				-- If there were compiler warnings, then a compiler window will be in front.
				-- For whatever reason, this causes the next "set the current target..." to fail.
				-- An easy way to make the window go away without having to know if it's there or not 
				-- is to build again, which, because everything is already compiled, finishes instantly
				-- and produces no warnings.
				--Make Project
				-- An even better way is to check for the window and close it.
				if the name of window 1 is "Errors & Warnings" then
					close first window -- "close window 1" becomes "Close Window 1" (different event)
				end if
			end repeat
			set the current target of project document 1 to target 1 of project document 1
			Close Project
		end repeat
		
	end tell
end BuildLibraries

on BuildAllLibraries()
	set myLibs to {"mitsock", "ncbi", "ncbiobj", "ncbicdr", "vibrant", Â
		"ncbidesk", "ncbitool", "ncbimmdb", "ddvlib", "ncbicn3d"}
	
	BuildLibraries(myLibs)
	
	if DOOPENGL then
		BuildLibraries({"vibrantOGL", "ncbicn3dOGL"})
	end if
	
	-- network
	set myLibs to {"ncbiNacc", "netentr", "netcli", "ncbibls3", "ncbiid1", "ncbimla", Â
		"ncbitxc2", "vibnet"}
	
	BuildLibraries(myLibs)
	
	if pBuildObsoleteLibraries then
		BuildLibraries("ncbiacc", "vibgif")
	end if
	
end BuildAllLibraries

on SignalCompletion()
	
	try
		say "Make complete."
	on error
		beep
	end try
	
end SignalCompletion

(* ==== This section populates and builds the libraries ==== *)

with timeout of 60000 seconds
	DoSetGlobals()
	
	CreateFolders()
	CopyPrefixes()
	
	tell application "CodeWarrior IDE 4.1.0.3" to activate
	
	CreateAllProjects()
	
	if pShouldBuild then
		BuildAllLibraries()
	end if
	
	SignalCompletion()
	
end timeout

